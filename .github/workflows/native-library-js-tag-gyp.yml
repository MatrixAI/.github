name: "CI / Library JS Tag"

on:
  workflow_call:
    secrets:
      NPM_TOKEN:
        required: true

jobs:
  # Lint the code
  tag-lint:
    name: "Tag / Lint"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'
      - uses: MatrixAI/.github/.github/actions/matrixai-env-setup@master
      - name: Run linting
        run: |
          nix develop .#ci --command bash -c $'
          npm run lint
          '

  # Build the distribution - JS is platform-agnostic
  tag-build:
    name: "Tag / Build"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write
    needs: tag-lint
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'
      - uses: MatrixAI/.github/.github/actions/matrixai-env-setup@master
      - name: Run build
        run: |
          nix develop .#ci --command bash -c $'
          npm run build --verbose
          '
      - name: Upload Build
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: ./dist

  tag-platforms:
    name: "Tag / Platforms"
    needs:
      - tag-build
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
      actions: write
      checks: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux
            os: ubuntu-latest
            env:
              npm_config_arch: "x64"
              RUST_BACKTRACE: "1"
            script: |
              nix develop .#ci --command bash -c $'
              npm run prebuild --verbose -- --production
              npm test -- --ci --coverage
              npm run bench
              '
          - platform: windows
            os: windows-latest
            env:
              npm_config_arch: "x64"
              RUST_BACKTRACE: "1"
              LIBCLANG_PATH: "C:\\Program Files\\LLVM\\bin"
            script: |
              mkdir -Force "$CI_PROJECT_DIR/tmp"
              Import-Module $env:ChocolateyInstall\helpers\chocolateyProfile.psm1
              ./scripts/choco-install.ps1
              refreshenv
              npm install --ignore-scripts
              $env:Path = "$(npm root)\.bin;" + $env:Path
              npm run prebuild --verbose -- --production
              npm test -- --ci --coverage
              npm run bench
          - platform: macos
            os: macos-latest
            env: {}
            script: |
              eval "$(brew shellenv)"
              ./scripts/brew-install.sh
              export PYTHON=$(brew --prefix python@3.10)/bin/python3.10
              hash -r
              npm install --ignore-scripts
              export PATH="$(npm root)/.bin:$PATH"
              npm run prebuild --verbose -- --production
              npm test -- --ci --coverage
              npm run bench
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'
      - if: matrix.platform == 'linux'
        uses: MatrixAI/.github/.github/actions/matrixai-env-setup@master
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - uses: actions/download-artifact@v4
        with:
          name: dist
          path: ./dist
      - name: Build
        env: ${{ matrix.env }}
        run: ${{ matrix.script }}
      - uses: actions/upload-artifact@v4
        with:
          name: prebuild-${{ matrix.platform }}
          path: ./prebuilds


  # Publish the prerelease
  tag-prerelease:
    name: "Tag / Pre-release"
    runs-on: ubuntu-latest
    concurrency:
      group: tag-prerelease
      cancel-in-progress: false
    needs:
      - tag-platforms
    permissions:
      contents: write
    if: startsWith(github.ref, 'refs/tags/v') && contains(github.ref, '-')
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'
      - uses: MatrixAI/.github/.github/actions/matrixai-env-setup@master
      - uses: actions/download-artifact@v4
        with:
          pattern: prebuild*
          path: prebuilds
          merge-multiple: true
      - name: Publishing library prerelease
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ./.npmrc
          nix develop .#ci --command bash -c $'
          npm publish --tag prerelease --access public
          '
          for d in prebuilds/*; do
            tar \
              --create \
              --verbose \
              --file="prebuilds/$(basename $d).tar" \
              --directory=prebuilds \
              "$(basename $d)"
          done
          nix develop .#ci --command bash -c $'
          gh release \
            create "$GITHUB_REF_NAME" \
            prebuilds/*.tar \
            --title "$GITHUB_REF_NAME-$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
            --notes "" \
            --prerelease \
            --target staging \
            --repo "$GITHUB_REPOSITORY"
          '
      - name: Remove `.npmrc`
        if: success() || failure()
        run: |
          rm -f ./.npmrc

  # Publish the release
  tag-release:
    name: "Tag / Release"
    runs-on: ubuntu-latest
    concurrency:
      group: tag-release
      cancel-in-progress: false
    needs:
      - tag-platforms
    permissions:
      contents: write
    if: startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, '-')
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'
      - uses: MatrixAI/.github/.github/actions/matrixai-env-setup@master
      - uses: actions/download-artifact@v4
        with:
          pattern: prebuild*
          path: prebuilds
          merge-multiple: true
      - name: Publishing library release
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ./.npmrc
          nix develop .#ci --command bash -c $'
          npm publish --access public
          '
          for d in prebuilds/*; do
            tar \
              --create \
              --verbose \
              --file="prebuilds/$(basename $d).tar" \
              --directory=prebuilds \
              "$(basename $d)"
          done
          nix develop .#ci --command bash -c $'
          gh release \
            create "$GITHUB_REF_NAME" \
            prebuilds/*.tar \
            --title "$GITHUB_REF_NAME-$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
            --notes "" \
            --target master \
            --repo "$GITHUB_REPOSITORY"
          '
      - name: Remove `.npmrc`
        if: success() || failure()
        run: |
          rm -f ./.npmrc
